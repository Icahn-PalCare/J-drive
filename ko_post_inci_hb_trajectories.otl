= V4 Outline MultiLine NoSorting TabWidth=30

H="Code to get dataset for Sankey diagram"
ma "J:\Geriatrics\PCare\HRS Projects\Data & Project-based (reference docs, etc)\NHATS\base_data\sp_round_1_8_public_sens_only.dta", clear
replace homebound_cat=. if lml==1 | nhres==1
forvalues i=2/8 {
	by spid: replace prob_dem=. if wave==`i' & prob_dem[_n-1]==.
}
by spid: egen firsthb=min(cond(homebound_cat==1),wave,.)
tab firsthb
tab firsthb wave
drop if missing(firsthb)
gen status=1 if homebound_cat==4
replace status=2 if inlist(homebound_cat,2,3)
replace status=3 if inlist(homebound_cat,1)
replace status=4 if nhres==1
replace status=5 if sp_status==4
by spid: gen nwstat=status[_n+1]
replace nwstat=5 if missing(nwstat) & nhats_died_12==1
forvalues i=2/8 {
	replace nwstat=5 if r`i'status==86 & wave==`i'-1
	replace nwstat=4 if r`i'status==64 & wave==`i'-1 & nhres==1

}

by spid: replace nwstat=nwstat[_n+1] if nwstat[_n+1]==status & missing(nwstat)
by spid: replace nwstat=status if missing(nwstat) & !missing(nwstat[_n+1])
replace nwstat=6 if missing(nwstat)
label define nwstat 1 "(1) Independent" 2 "(2) Semi-HB" 3 "(3) HB" 4 "(4) NH" 5 "(5) Dead" 6 "LFU" 7 "Censored"
label values nwstat nwstat
replace nwstat=7 if wave==8
drop if wave<firsthb
drop if firsthb==year-2010 | firsthb==8
sort spid wave 
by spid: gen t=_n
label values status nwstat

preserve
tab t
drop if lml==1
replace nwstat=6 if status==4 & nwstat<3
tab status nwstat if nwstat<6, row nokey
tab status nwstat if nwstat<6 & t==1, row nokey
tab status nwstat if nwstat<6 & t>1, row nokey


keep spid nwstat t
reshape wide nwstat, i(spid) j(t)
gen nwstat0=3
label define nwstat0 3 "Incident HB"
label values nwstat0 nwstat0
forvalues i=1/7 {
	replace nwstat`i'=nwstat`=`i'-1' if inlist(nwstat`=`i'-1',5/*,7*/)
	*replace nwstat`i'=nwstat`=`i'-1' if missing(nwstat`i') & inlist(nwstat`=`i'-1',5,6,7)
}
restore

keep spid nwstat t
expand 2
sort spid t
by spid: replace t=0 if _n==1
duplicates drop
replace nwstat=0 if t==0
label define nwstat 0 "Incident HB", modify
rename nwstat status
label var status "Status at current wave"
label var t "Time from incident homebound"
sort spid t
by spid: replace status=5 if status[_n-1]==5

forvalues i=1/7 {
expand 2
sort spid t
by spid: replace t=t+1 if _n==_N
duplicates drop
}
drop if t>7


/*local n=0
local fdenom=10000
forvalues t=2/2 {
	qui sum status if t==`t' & status<6
	if `t'>1 local fdenom=r(N)
	forvalues n1=0/4 {
		qui sum prevstat if t==`t' & prevstat==`n1' & status<6
		local denom=r(N)
		di "t=`t', n1=`n1', denom=`denom'
		forvalues i=1/5 {
			qui sum status if t==`t' & prevstat==`n1' & status==`i'
			local numer=r(N)
			di `numer'
			qui replace stat`t'=`i' if inrange(_n,`n'+1,`n'+round((`numer'/`denom')*`fdenom')) & `denom'>0
			if `denom'>0 local n=`n'+round((`numer'/`denom')*`fdenom') 
			di "n=`n'"
}
		qui replace stat`t'=5 if missing(stat`t') & _n<=round(`fdenom'/`denom') & `denom'>0
		qui replace stat`t'=5 if missing(stat`t') & `denom'==0
		if `denom'>0 local n=round(`fdenom'/`denom') 
		di "n=`n'"
		qui replace stat`t'=. if _n>1000
}
	local n=0
	label define stat`t' 0 "Incident HB" 1 "(1) Independent" 2 "(2) Semi-HB" 3 "(3) HB" 4 "(4) NH" 5 "(5) Dead" 6 "LFU" 7 "Censored", modify
	label values stat`t' stat`t'
}*/
replace status=. if status>=6
levelsof status, local(levels)
foreach l of local levels {
	gen status`l'=status==`l'
}

sort spid t 
by spid: gen prevstat=status[_n-1]

gen n=_n
gen stat0=0 if _n<=1000
label define stat0 0 "100% Incident HB"
label values stat0 stat0
local n=0

forvalues t=1/6 {
	sort stat`=`t'-1'
		gen stat`t'=.
	label define stat`t' 0 "Incident HB" 1 "(1) Independent" 2 "(2) Semi-HB" 3 "(3) HB" 4 "(4) NH" 5 "(5) Dead" 6 "LFU" 7 "Censored", modify
	label values stat`t' stat`t'
	qui sum status if t==`t'
	local denom=r(N)
	forvalues n1=0/5 {
		qui sum status if prevstat==`n1' & t==`t' & status<6
		qui sum stat`=`t'-1' if stat`=`t'-1'==`n1' 

		local d2=r(N)
		if `d2'==. local d2=0
				di "t=`t', n1=`n1', denom=`denom', d2=`d2'"

		forvalues i=5(-1)1 {
			qui sum status`i' if prevstat==`n1' & t==`t' & status<6
			local m=r(mean)
			if `d2'>0 {
			di "range is `=`n'+1' to  `=`n'+round(`m'*`d2')'"
			replace stat`t'=`i' if inrange(_n,`n'+1,`n'+round(r(mean)*`d2'))
			local n=`n'+round(r(mean)*`d2')
}
			di "n=`n'"

			
}
}
	replace stat`t'=5 if stat`=`t'-1'==5
	replace stat`t'=. if _n>1000
	local n=0
}


replace stat6=5 if missing(stat6) & _n<=1000
preserve
keep spid stat*
drop statu*		
keep if _n<1001


forvalues i=1/6 {
	forvalues j=1/5 {
		qui sum stat`i' if stat`i'==`j'
		local pct`j'=round((r(N)/1000)*100)
}
	label define stat`i' 0 "Incident HB" 1 "(1) `pct1'% Independent" 2 "(2) `pct2'% Semi-HB" 3 "(3) `pct3'% HB" 4 "(4) `pct4'% NH" 5 "(5) `pct5'% Dead" 6 "LFU" 7 "Censored", modify
}	


H="a"
use "J:\Geriatrics\PCare\HRS Projects\Data & Project-based (reference docs, etc)\NHATS\base_data\sp_round_1_8_public_sens_only.dta", clear
replace homebound_cat=. if lml==1 | nhres==1
forvalues i=2/8 {
	by spid: replace prob_dem=. if wave==`i' & prob_dem[_n-1]==.
}
by spid: egen firsthb=min(cond(homebound_cat==1),wave,.)
tab firsthb
tab firsthb wave
drop if missing(firsthb)
gen status=1 if homebound_cat==4
replace status=2 if inlist(homebound_cat,2,3)
replace status=3 if inlist(homebound_cat,1)
replace status=4 if nhres==1
replace status=5 if sp_status==4
by spid: gen nwstat=status[_n+1]
replace nwstat=5 if missing(nwstat) & nhats_died_12==1
forvalues i=2/8 {
	replace nwstat=5 if r`i'status==86 & wave==`i'-1
	replace nwstat=4 if r`i'status==64 & wave==`i'-1 & nhres==1

}

by spid: replace nwstat=nwstat[_n+1] if nwstat[_n+1]==status & missing(nwstat)
by spid: replace nwstat=status if missing(nwstat) & !missing(nwstat[_n+1])
replace nwstat=6 if missing(nwstat)
label define nwstat 1 "(1) Independent" 2 "(2) Semi-HB" 3 "(3) HB" 4 "(4) NH" 5 "(5) Dead" 6 "LFU" 7 "Censored"
label values nwstat nwstat
replace nwstat=7 if wave==8
drop if wave<firsthb
drop if firsthb==year-2010 | firsthb==8
sort spid wave 
by spid: gen t=_n
label values status nwstat

preserve
tab t
drop if lml==1
replace nwstat=6 if status==4 & nwstat<3
tab status nwstat if nwstat<6, row nokey
tab status nwstat if nwstat<6 & t==1, row nokey
tab status nwstat if nwstat<6 & t>1, row nokey


keep spid nwstat t
reshape wide nwstat, i(spid) j(t)
gen nwstat0=3
label define nwstat0 3 "Incident HB"
label values nwstat0 nwstat0
forvalues i=1/7 {
	replace nwstat`i'=nwstat`=`i'-1' if inlist(nwstat`=`i'-1',5/*,7*/)
	*replace nwstat`i'=nwstat`=`i'-1' if missing(nwstat`i') & inlist(nwstat`=`i'-1',5,6,7)
}
restore

keep spid nwstat t
expand 2
sort spid t
by spid: replace t=0 if _n==1
duplicates drop
replace nwstat=0 if t==0
label define nwstat 0 "Incident HB", modify
rename nwstat status
label var status "Status at current wave"
label var t "Time from incident homebound"
sort spid t
by spid: replace status=5 if status[_n-1]==5

forvalues i=1/s {
expand 2
sort spid t
by spid: replace t=t+1 if _n==_N
duplicates drop
}
drop if t>7

saveold "J:\Geriatrics\PCare\HRS Projects\Data & Project-based (reference docs, etc)\NHATS\Ornstein_R01_homebound\post_incident_hb\data\markov_data.dta", replace version(12)
/*local n=0
local fdenom=10000
forvalues t=2/2 {
	qui sum status if t==`t' & status<6
	if `t'>1 local fdenom=r(N)
	forvalues n1=0/4 {
		qui sum prevstat if t==`t' & prevstat==`n1' & status<6
		local denom=r(N)
		di "t=`t', n1=`n1', denom=`denom'
		forvalues i=1/5 {
			qui sum status if t==`t' & prevstat==`n1' & status==`i'
			local numer=r(N)
			di `numer'
			qui replace stat`t'=`i' if inrange(_n,`n'+1,`n'+round((`numer'/`denom')*`fdenom')) & `denom'>0
			if `denom'>0 local n=`n'+round((`numer'/`denom')*`fdenom') 
			di "n=`n'"
}
		qui replace stat`t'=5 if missing(stat`t') & _n<=round(`fdenom'/`denom') & `denom'>0
		qui replace stat`t'=5 if missing(stat`t') & `denom'==0
		if `denom'>0 local n=round(`fdenom'/`denom') 
		di "n=`n'"
		qui replace stat`t'=. if _n>1000
}
	local n=0
	label define stat`t' 0 "Incident HB" 1 "(1) Independent" 2 "(2) Semi-HB" 3 "(3) HB" 4 "(4) NH" 5 "(5) Dead" 6 "LFU" 7 "Censored", modify
	label values stat`t' stat`t'
}*/
replace status=. if status>=6
levelsof status, local(levels)
foreach l of local levels {
	gen status`l'=status==`l'
}

sort spid t 
by spid: gen prevstat=status[_n-1]

gen n=_n
gen stat0=0 if _n<=1000
label define stat0 0 "100% Incident HB"
label values stat0 stat0
local n=0

forvalues t=1/6 {
	sort stat`=`t'-1'
		gen stat`t'=.
	label define stat`t' 0 "Incident HB" 1 "(1) Independent" 2 "(2) Semi-HB" 3 "(3) HB" 4 "(4) NH" 5 "(5) Dead" 6 "LFU" 7 "Censored", modify
	label values stat`t' stat`t'
	qui sum status if t==`t'
	local denom=r(N)
	forvalues n1=0/5 {
		qui sum status if prevstat==`n1' & t==`t' & status<6
		qui sum stat`=`t'-1' if stat`=`t'-1'==`n1' 

		local d2=r(N)
		if `d2'==. local d2=0
				di "t=`t', n1=`n1', denom=`denom', d2=`d2'"

		forvalues i=5(-1)1 {
			qui sum status`i' if prevstat==`n1' & t==`t' & status<6
			local m=r(mean)
			if `d2'>0 {
			di "range is `=`n'+1' to  `=`n'+round(`m'*`d2')'"
			replace stat`t'=`i' if inrange(_n,`n'+1,`n'+round(r(mean)*`d2'))
			local n=`n'+round(r(mean)*`d2')
}
			di "n=`n'"

			
}
}
	replace stat`t'=5 if stat`=`t'-1'==5
	replace stat`t'=. if _n>1000
	local n=0
}


replace stat6=5 if missing(stat6) & _n<=1000
preserve
keep spid stat*
drop statu*		
keep if _n<1001


forvalues i=1/6 {
	forvalues j=1/5 {
		qui sum stat`i' if stat`i'==`j'
		local pct`j'=round((r(N)/1000)*100)
}
	label define stat`i' 0 "Incident HB" 1 "(1) `pct1'% Independent" 2 "(2) `pct2'% Semi-HB" 3 "(3) `pct3'% HB" 4 "(4) `pct4'% NH" 5 "(5) `pct5'% Dead" 6 "LFU" 7 "Censored", modify
}	


H="r"

library(foreign)
mydata <- read.dta("J:/Geriatrics/PCare/HRS Projects/Data & Project-based (reference docs, etc)/NHATS/Ornstein_R01_homebound/post_incident_hb/data/markov_data_nowt.dta")


library(msm)

qm2 <- rbind ( c(0,.15,.15,.15,.15),c(.15,0,.15,.15,.15), c(.15,.15,0,.15,.15),  c(.15,.15,.15,0,.15), c(0,0,0,0,0))

#this all runs, though the interpretation of the pnext isn't clear to me
rownames(qm2) <- colnames(qm2) <- c("Independent", "Semi-HB", "HB", "NH",  "Dead") 
mydata.msm <- msm(state ~ t, subject=spid, data=mydata, qmatrix=qm2)
mydata.msm
pmatrix.msm(mydata.msm)
plot.msm(mydata.msm)
sojourn.msm(mydata.msm)
totlos.msm(mydata.msm)
pnext.msm(mydata.msm)


#works
withvars.msm <- msm(state ~ t, subject=spid, data=mydata, qmatrix=qm2, covariates=~ female educ_hs_ind)
withvars.msm
pmatrix.msm(withvars.msm)
plot.msm(withvars.msm)
sojourn.msm(withvars.msm)
totlos.msm(withvars.msm)
#doesn't work
pnext.msm(withvars.msm)


#doesn't work
withvars.msm <- msm(state ~ t, subject=spid, data=mydata, qmatrix=qm2, covariates=~ age)
#works
withvars.msm <- msm(state ~ t, subject=spid, data=mydata, qmatrix=qm2, covariates=~ age75 female educ_hs_ind)




H="get data for markov, incident"
use "J:\Geriatrics\PCare\HRS Projects\Data & Project-based (reference docs, etc)\NHATS\base_data\sp_round_1_8_public_sens_only.dta" if year==2011, clear

replace anfinwgt=an2011wgt if wave>=5



replace homebound_cat=. if lml==1 | nhres==1
forvalues i=2/8 {
	by spid: replace prob_dem=. if wave==`i' & prob_dem[_n-1]==.
}
by spid: egen firsthb=min(cond(homebound_cat==1),wave,.)
tab firsthb
tab firsthb wave
drop if missing(firsthb)
gen status=1 if homebound_cat==4
replace status=2 if inlist(homebound_cat,2,3)
replace status=3 if inlist(homebound_cat,1)
replace status=4 if nhres==1
replace status=5 if sp_status==4
by spid: gen nwstat=status[_n+1]
replace nwstat=5 if missing(nwstat) & nhats_died_12==1
forvalues i=2/8 {
	replace nwstat=5 if r`i'status==86 & wave==`i'-1
	replace nwstat=4 if r`i'status==64 & wave==`i'-1 & nhres==1

}

by spid: replace nwstat=nwstat[_n+1] if nwstat[_n+1]==status & missing(nwstat)
by spid: replace nwstat=status if missing(nwstat) & !missing(nwstat[_n+1])
replace nwstat=6 if missing(nwstat)
label define nwstat 1 "(1) Independent" 2 "(2) Semi-HB" 3 "(3) HB" 4 "(4) NH" 5 "(5) Dead" 6 "LFU" 7 "Censored"
label values nwstat nwstat
replace nwstat=7 if wave==8
drop if wave<firsthb
drop if firsthb==year-2010 | firsthb==8
sort spid wave 
by spid: gen t=_n
label values status nwstat



sort spid wave
by spid: replace anfinw=anfinw[_n-1] if status==5
by spid: replace anfinw=anfinw[_n-1] if status==4 & !anfinw
by spid: replace anfinw=anfinw[_n-1] if !anfinw & rcfres==1

//old
/*
preserve
tab t
drop if lml==1
replace nwstat=6 if status==4 & nwstat<3
tab status nwstat if nwstat<6, row nokey
tab status nwstat if nwstat<6 & t==1, row nokey
tab status nwstat if nwstat<6 & t>1, row nokey


keep spid nwstat t
reshape wide nwstat, i(spid) j(t)
gen nwstat0=3
label define nwstat0 3 "Incident HB"
label values nwstat0 nwstat0
forvalues i=1/7 {
	replace nwstat`i'=nwstat`=`i'-1' if inlist(nwstat`=`i'-1',5/*,7*/)
	*replace nwstat`i'=nwstat`=`i'-1' if missing(nwstat`i') & inlist(nwstat`=`i'-1',5,6,7)
}
restore
*/

keep spid anfinwgt nwstat t educ_hs_ind female prob_dem age wave income_quart married
expand 2
sort spid t
by spid: replace t=0 if _n==1
duplicates drop
replace nwstat=0 if t==0
label define nwstat 0 "Incident HB", modify
rename nwstat status
label var status "Status at current wave"
label var t "Time from incident homebound"
sort spid t
by spid: replace status=5 if status[_n-1]==5

forvalues i=1/7 {
expand 2
sort spid t
by spid: replace t=t+1 if _n==_N
duplicates drop
}
drop if t>7


/*local n=0
local fdenom=10000
forvalues t=2/2 {
	qui sum status if t==`t' & status<6
	if `t'>1 local fdenom=r(N)
	forvalues n1=0/4 {
		qui sum prevstat if t==`t' & prevstat==`n1' & status<6
		local denom=r(N)
		di "t=`t', n1=`n1', denom=`denom'
		forvalues i=1/5 {
			qui sum status if t==`t' & prevstat==`n1' & status==`i'
			local numer=r(N)
			di `numer'
			qui replace stat`t'=`i' if inrange(_n,`n'+1,`n'+round((`numer'/`denom')*`fdenom')) & `denom'>0
			if `denom'>0 local n=`n'+round((`numer'/`denom')*`fdenom') 
			di "n=`n'"
}
		qui replace stat`t'=5 if missing(stat`t') & _n<=round(`fdenom'/`denom') & `denom'>0
		qui replace stat`t'=5 if missing(stat`t') & `denom'==0
		if `denom'>0 local n=round(`fdenom'/`denom') 
		di "n=`n'"
		qui replace stat`t'=. if _n>1000
}
	local n=0
	label define stat`t' 0 "Incident HB" 1 "(1) Independent" 2 "(2) Semi-HB" 3 "(3) HB" 4 "(4) NH" 5 "(5) Dead" 6 "LFU" 7 "Censored", modify
	label values stat`t' stat`t'
}*/
replace status=. if status>=6
levelsof status, local(levels)
foreach l of local levels {
	gen status`l'=status==`l'
}

sort spid t 
by spid: gen prevstat=status[_n-1]
drop if status==6

gen n=_n
gen stat0=0 if _n<=1000
label define stat0 0 "100% Incident HB"
label values stat0 stat0
local n=0

forvalues t=1/6 {
	sort stat`=`t'-1'
		gen stat`t'=.
	label define stat`t' 0 "Incident HB" 1 "(1) Independent" 2 "(2) Semi-HB" 3 "(3) HB" 4 "(4) NH" 5 "(5) Dead" 6 "LFU" 7 "Censored", modify
	label values stat`t' stat`t'
	qui sum status if t==`t' 
	local denom=r(N)
	forvalues n1=0/5 {
		qui sum status if prevstat==`n1' & t==`t' & status<6 [aw=anfinw]
		qui sum stat`=`t'-1' if stat`=`t'-1'==`n1'  [aw=anfinw]

		local d2=r(N)
		if `d2'==. local d2=0
				di "t=`t', n1=`n1', denom=`denom', d2=`d2'"

		forvalues i=5(-1)1 {
			qui sum status`i' if prevstat==`n1' & t==`t' & status<6 [aw=anfinw]
			local m=r(mean)
			if `d2'>0 {
			di "range is `=`n'+1' to  `=`n'+round(`m'*`d2')'"
			replace stat`t'=`i' if inrange(_n,`n'+1,`n'+round(r(mean)*`d2'))
			local n=`n'+round(r(mean)*`d2')
}
			di "n=`n'"

			
}
}
	replace stat`t'=5 if stat`=`t'-1'==5
	replace stat`t'=. if _n>1000
	replace stat`t'=5 if missing(stat`t') & _n<=1000

	local n=0
}


replace stat6=5 if missing(stat6) & _n<=1000
replace stat1=5 if missing(stat1) & _n<=1000
preserve
keep spid anfinwgt stat* 
drop statu*		anfinw
keep if _n<1001


forvalues i=1/6 {
	forvalues j=1/5 {
		qui sum stat`i' if stat`i'==`j' //[aw=anfinw]
		local pct`j'=round((r(N)/1000)*100)
}
	label define stat`i' 0 "Incident HB" 1 "(1) `pct1'% Independent" 2 "(2) `pct2'% Semi-HB" 3 "(3) `pct3'% HB" 4 "(4) `pct4'% NH" 5 "(5) `pct5'% Dead" 6 "LFU" 7 "Censored", modify
}	
restore

keep spid anfinw status educ female prob_dem t age wave income_quart married
sort spid t
by spid: egen a=min(age)
replace age=a
drop a

gen age75=age>=75
gen age85=age>=85


by spid: drop if status[_n-1]==5
gen wt=round(anfinw/1000) if t==1
by spid: carryforward wt, replace
expand wt
drop anfinw wt
tostring spid, gen(strid)
sort spid t 
by spid t: gen n=_n
gen spidwt=strid+string(n)
drop n 
gen state=status
drop if missing(state)
drop if state==0
sort spidwt t
by spidwt: drop if _N==1
saveold "J:/Geriatrics/PCare/HRS Projects/Data & Project-based (reference docs, etc)/NHATS/Ornstein_R01_homebound/post_incident_hb/data/markov_data_wt.dta", version(12) replace

drop spidwt 
duplicates drop
saveold "J:/Geriatrics/PCare/HRS Projects/Data & Project-based (reference docs, etc)/NHATS/Ornstein_R01_homebound/post_incident_hb/data/markov_data_nowt.dta", version(12) replace

H="get dataset for markov, full"
set seed 060883

use spid wave homebound_cat using "J:\Geriatrics\PCare\HRS Projects\Data & Project-based (reference docs, etc)\NHATS\base_data\sp_round_1_8_public_sens_only.dta" if wave==1 & !missing(homebound_cat), clear
gen norm=rnormal()
sort norm
gen keep=_n<=_N/3
keep if keep
drop wave ho

merge 1:m spid using "J:\Geriatrics\PCare\HRS Projects\Data & Project-based (reference docs, etc)\NHATS\base_data\sp_round_1_8_public_sens_only.dta", keep(match)

gen t=wave
drop if !sp_ivw


keep spid prob_dem homebound_cat nhres *died_12 female *hs* adl_impair married t lml
tab homebou lml, m
foreach x of varlist * {
drop if missing(`x') & !lml
}
gen status=1 if home==4
replace status=2 if inlist(home,2,3)
replace status=3 if home==1
replace status=4 if nhres==1
sort spid t
replace status=5 if lml==1
tab status,m
by spid: drop if _N==1
saveold "J:\Geriatrics\PCare\HRS Projects\Data & Project-based (reference docs, etc)\NHATS\Ornstein_R01_homebound\post_incident_hb\data\markov_full.dta", version(12) replace

H="markov code"
library(foreign)
mydata <- read.dta("J:/Geriatrics/PCare/HRS Projects/Data & Project-based (reference docs, etc)/NHATS/Ornstein_R01_homebound/post_incident_hb/data/markov_full.dta")


library(msm)

qm2 <- rbind ( c(0,.15,.15,.15,.15),c(.15,0,.15,.15,.15), c(.15,.15,0,.15,.15),  c(.15,.15,.15,0,.15), c(0,0,0,0,0))

rownames(qm2) <- colnames(qm2) <- c("Independent", "Semi-HB", "HB", "NH",  "Dead") 
mydata.msm <- msm(status ~ t, subject=spid, data=mydata, qmatrix=qm2)
mydata.msm
pmatrix.msm(mydata.msm)
pmatrix.msm(mydata.msm, t=1)
pmatrix.msm(mydata.msm, t=5)
pmatrix.msm(mydata.msm, t=10)

plot.msm(mydata.msm)
sojourn.msm(mydata.msm)
totlos.msm(mydata.msm)
pnext.msm(mydata.msm)
